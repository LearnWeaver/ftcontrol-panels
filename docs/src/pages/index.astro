---
import fs from "fs"
import path from "path"
import { execSync } from "child_process"
import { SimpleDynamicComponent, type PluginConfig } from "ftc-panels"

const libraryPath = path.resolve(process.cwd(), "../library")
const modules: PluginConfig[] = []

const modulesRaw = fs
  .readdirSync(libraryPath, { withFileTypes: true })
  .filter((d) => d.isDirectory())
  .map((d) => d.name)

for (const name of modulesRaw) {
  const modulePath = path.join(libraryPath, name)
  const webDir = path.join(modulePath, "web")

  const packageJsonPath = path.join(webDir, "package.json")
  if (fs.existsSync(packageJsonPath)) {
    const pkg = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"))
    if (pkg.scripts?.build) {
      console.log(`Building module "${name}"...`)
      try {
        execSync("bun run build", {
          cwd: webDir,
          stdio: "inherit",
        })
      } catch (e) {
        console.error(`Failed to build ${name}:`, e)
        continue
      }
    }
  }

  const distConfigJson = path.join(webDir, "dist", "config.json")
  if (!fs.existsSync(distConfigJson)) continue

  const rawConfig = fs.readFileSync(distConfigJson, "utf-8")
  const config = JSON.parse(rawConfig) as PluginConfig

  modules.push(config)
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Library Modules with Docs</title>
  </head>
  <body>
    <h1>Library Modules with Docs</h1>
    {
      modules.map((mod) => (
        <section>
          <h2>{mod.name}</h2>
          <h3>{mod.docs.homepage.name}</h3>
          <SimpleDynamicComponent
            client:load
            info={mod}
            textContent={mod.docs.homepage.textContent}
          />
        </section>
      ))
    }
  </body>
</html>
