---
import fs from "fs"
import path from "path"

const libraryPath = path.resolve(process.cwd(), "../library")

function isDirectory(p: string) {
  return fs.existsSync(p) && fs.statSync(p).isDirectory()
}

const modulesRaw = fs
  .readdirSync(libraryPath, { withFileTypes: true })
  .filter((d) => d.isDirectory())
  .map((d) => d.name)

const modules = []

for (const name of modulesRaw) {
  const modulePath = path.join(libraryPath, name)
  const buildFile = path.join(modulePath, "build.gradle.kts")
  const distConfigJson = path.join(modulePath, "web", "dist", "config.json")

  const isValid =
    fs.existsSync(buildFile) &&
    isDirectory(path.join(modulePath, "web")) &&
    fs.existsSync(distConfigJson)

  if (!isValid) continue

  try {
    const raw = fs.readFileSync(distConfigJson, "utf-8")
    const config = JSON.parse(raw)
    modules.push({
      name,
      docs: config.docs ?? null,
    })
  } catch (e) {
    console.error(`Failed to read or parse ${distConfigJson}`, e)
  }
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Library Modules with Docs</title>
  </head>
  <body>
    <h1>Library Modules with Docs</h1>
    <ul>
      {
        modules.map((mod) => (
          <li>
            <strong>{mod.name}</strong>
            {mod.docs ? (
              <div>
                <p>
                  <strong>Homepage:</strong> {mod.docs.homepage?.filepath}
                </p>
                <p>
                  <strong>Chapters:</strong>
                </p>
                <ul>
                  {mod.docs.chapters?.map((ch) => (
                    <li>
                      {ch.name} â€” {ch.filepath}
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <p>No docs found</p>
            )}
          </li>
        ))
      }
    </ul>
  </body>
</html>
